Data types can be two different "types":
    ->Primitive data types
    -> Non Primitive data types

Primitive data type in Javascript are:
    ->Numbers - Integer and float
    ->Strings - Data expressed under single, double or backtick quote
    ->Booleans - True or false values
    ->Null - Empty value
    ->Undefined - Variable declared without a value
    ->Symbol - A unique value that can be generated by the Symbol constructor

Non primitive data types
    ->Array
    -Objects

Primitive data types are immutable, once created they cannot be modified
    For example:
        let word="Hello"
        word[0]="Y"
    This will raise an error

Primitive data types can be compared by values
    let num1=1
    let num2=1
    console.log(num1 == num2) //True

    let cpp="C++"
    let cs="CSharp"
    console.log(cpp == cs) //False

    let lightOn = true
    let lightOff = false
    console.log(lightOn == lightOff) //False

Non primitive data types are mutable. The value can be modified after the variable is created
    For example we use an array:
        let array=[1,2,3]
        array[0]=10
        console.log(array) // [10,2,3]
    Non primitive data types can be compared by value, but even if they have the same values and properties they are not strictly equal
        let array1=[1,2,3]
        let array2=[1.2,3]
        console.log(array1==array2) //False

        let user1 = {
            name:"Giovanni",
            age:20
        }

        let user2 = {
            name:Giovanni,
            age:20
        }

        console.log(user1==user2) //False

    In general non primitive data types are not compared. Non primitive data values are compared by reference. Two objects are stricly equals if they refer to the same object
        let array1=[1,2,3]
        let array2=array1
        console.log(array1==array2) //True

        let user1 ={
            name:"Giorgio"
            age:28
        }
        let user2=user1
        console.log(user1==user2) //True


Numbers
    Numbers are integer and decimal values which can do the arithmetic operations

        let age=34
        const gravity=9.81 //const in used for non changing values

    The Math Object provides a lot of methods to work with numbers

        const pi = Math.PI
        console.log(pi) //3.141592653589793

        console.log(Math.round(pi)) //3 -> Rounds to the nearest number
        console.log(Math.round(9.81)) //10
        console.log(Math.floor(pi)) //3 -> Rounds down
        console.log(Math.ceil(pi)) //4 -> Rounds up
        console.log(Math.min(1,2,45,4,3)) //1 -> Returns the minimum value
        console.log(Math.max(1,2,3,4,5)) //5 -> Returns the maximum value

        const rand=Math.random() //Creates a random number between 0 and 0.999999

        //To change the range of the random generation 
        const rand=Math.random()*11 //This generates a random number between 0 and 10.99
        //To obtain the integer version use the floor methods

        console.log(Math.abs(-1)) //1 -> Returns the absolute value
        console.log(Math.sqrt(100)) //10 -> Returns the square root
        console.log(Math.pow(3,2)) //9 -> Returns the power, first number is the base, the second the power

        console.log(Math.log(2)) //0.6931471805599453 -> Returns the logarithm with base e
    
        //Math.LN2 and Math.LN10 are two constant that returns the natural logarithm of 2 and 10 without the need to calculate them

        console.log(Math.sin(0)) //0 -> Returns the sine of 0
        console.log(Math.cos(0)) //1 -> Returns the cosine of 0


Strings
    Text under single,double or backtick quote
        let space=' ' //empty space string
        let name='Alberto'
        let quote="Identity theft is not a joke 'Jim'! Million of families suffer every year"
    
    String concatenation
    
    Connecting two or more strings together
        let firstName='Dwight'
        let lastName='Schrute'
        let space=' '
        let fullName= firstName+space+lastName
        console.log(fullName) //Dwight Schrute
    
    For longer strings that does not fits in one line the \ can be used at the end of each line to indicate that the string will continue in the next line

        const monologue="My name is Yoshikage Kira. I'm 33 years old.\ 
        My house is in the northeast section of Morioh, where all the villas are, and I am\
        not married. I work as an employee for the Kame Yu department stores,\
        and I get home every day by 8 PM at the latest.\
        I don't smoke, but I occasionally drink.\ 
        I'm in bed by 11 PM, and make sure I get eight hours of sleep, no matter what.\
        After having a glass of warm milk and doing about twenty minutes of stretches\
        before going to bed, I usually have no problems sleeping until morning.\
        Just like a baby, I wake up without any fatigue or stress in the morning.\
        I was told there were no issues at my last check-up.\
        I'm trying to explain that I'm a person who wishes to live a very quiet life.\
        I take care not to trouble myself with any enemies, like winning and losing,\
        that would cause me to lose sleep at night. That is how I deal with society,\
        and I know that is what brings me happiness.\
        Although, if I were to fight I wouldn't lose to anyone."

    Data can be injected in the strings ad expressions, to do it it has to be encapsulated in {}
        let a=4
        let b=2
        console.log(`The sum of ${a} and ${b} is ${a+b}`)
        console.log(`${a} is greater than ${b}: ${a>b}`)
    This method is also called interpolation and as seen can be used to perform operations, such as comparison, arithmetic operations, ternary operatyions, etc...

    Everything in Javascript is an object. As said before strings are primitive data types and cannot be modified once created, but there are methods that allow to work with strings

    1. lenght
    Returns the number of characters, included spaces, in a string
        let js="Javascript"
        console.log(js.lenght) //10
    
    2. Accessing characters in strings
    A single character in a string can be accessed using his index, index starts from 0
        let string="House"
        console.log(string[0]) //H
    
    3. toUpperCase
    Change the string in upper case letters
        let string="john"
        console.log(string.toUpperCase()) //JOHN
    
    4. toLowerCase
    Change the string in lower case letters
        let string="JOHN"
        console.log(string.toLowerCase()) //john

    5. substr()
    It takes two argumets, the starting index and the number of characters to slice
        let string="Javascript"
        console.log(string.substr(4,6)) //script

        let string="boo of watah"
        console.log(string.substr(7,5)) /watah
    
    6. substring()
    It takes two arguments, the starting index and the stopping index, it does not include the character at the stoppping index. If not specified the stopping index the method slices until the end of the string
        let string="Javascript"
        console.log(string.substring(0,4)) //Java

        let string="Hawk tuah"
        console.log(string.substring(5,9)) //tuah

        let string="Obama Prism"
        console.log(string.substring(6)) //Prism
    
    7. spilt()
    Splits a string in a specified place
        let string="Smooth operator"
        console.log(string.split()) //Change to an array -> ["Smooth operator"]
        console.log(string.split(' ')) //Split to an array at space -> ["Smooth", "operator"]
    
    8. trim()
    Removes the tariling space at the beginnig or end of the string, without arguments it stills removes spaces
        let string=" Javascript "
        console.log(string.trim(' ')) //Javascript

    9. includes()
    It takes a substring argument and checks if it exists in the string. Returns a boolean. It's case sensitive
        let string="Nothing just an inchident"
        console.log(string.includes("just")) //True
        console.log(string.includes("nothing")) //False
        console.log(string.includes("in")) //True
    
    10. replace()
    Replaces the first argument with the second
        let string="Obama Barack"
        console.log(string.replace("Barack", "Prism")) //Obama Prism
        let string="Greenland"
        console.log(string.replace("Green","Fin")) //Finland
    
    11. charAt()
    Return the value of the given index
        let string="Charles"
        console.log(charAt(1)) //h
    
    12. charCodeAt()
    Return the ASCII number of the given index
        let string="Lewis Hamilton"
        console.log(string.charCodeAt(11)) //68
    
    13. indexOf()
    Returns the first position of a substring in the string, if the substring does not exists in the string it returns -1. It's case sensitive
        let string="Javascript"
        console.log(string.indexOf("J")) //0
        console.log(string.indexOf("j")) //-1
        console.log(string.indexOf("script")) //4
    
    14. lastIndexOf()
    Returns the last position of a substring in the string, if the substring does not exists in the string it returns -1. It's case sensitive
        let string="Javascript"
        console.log(string.indexOf("a")) //3
        console.log(string.indexOf("A")) //-1
        console.log(string.indexOf("script")) //4

    15. concat()
    Joins given substrings
        let string1="Java"
        let string2="script"
        console.log(string1.concat(string2)) //Javascript
        console.log(string2.concat(string1)) //scriptJava
    
    16. startsWith()
    Checks if the string starts with the given substring. It returns a boolean. It's case sensitive
        let string="Javascript"
        console.log(string.startsWith("Java")) //True
        console.log(string.startsWith("java")) //False
    
    17. endsWith()
    Check if the string ends with the given substring. It returns a boolean. It's case sensitive
        let string="Javascript"
        console.log(string.endsWith("script")) //True
        console.log(string.endsWith("Script")) //False
    
    18. search()
    Searchs of the given substring in the string and returns the index of the first match. The search value can be a string or a regular expression pattern
        let string="I want it that way. Tell me why"
        console.log(string.search("want")) //2
        console.log(string.search(/tell/gi)) // /tell declare the text to search, /g means to search in the whole text, i case insentivie -> 20
    
    19. match()
    Given a substring or a regular expression it returns an array if there is a match, if not returns null
        let string="I want it that way. Tell me why"
        console.log(string.match("want")) //['want',index: 2,input: 'I want it that way. Tell me why',groups: undefined]

        let string="I want it that way. Tell me why"
        console.log(string.match(/want/gi)) //["want"]
    
        let string="1990 was the year before 1991. Today we are in year 2024"
        console.log(string.match(/\d/g)) //["1","9","9","0","1","9","9","1","2","0","2","4"]
        console.log(string.match(/\d+/g)) //["1990","1991","2024"]
    
    20. repeat()
    Repeats the string the number of times given by argument
        let string="Charles"
        console.log(string.repeat(2)) //CharlesCharles

Checking Data types
    To check the data type of a certain variable can be used the methon typeof
    let cow="Pheraps"
    let pi=3.14
    let bool=false
    let a //Undefined

    console.log(typeof(cow)) //string
    console.log(typeof(pi)) //number
    console.log(typeof(bool)) //boolean
    console.log(typeof(a)) //undefined
    console.log/typeof(NaN) //number
    console.log(typeof(true)) //boolean
    console.log(typeof(null)) //object
    console.log(typeof(undefined)) //undefined

Casting
    To convert one data type to another is used the cast. There are some methods specifically created to cast. Casting is used for examople when a number is extracted from a string it has to be casted to a number otherwise every arithmetic operation will end with an error

    1.String to int
    - parseInt()
    - Number()
    - +
        let numString="10"
        let numInt=parseInt(numString)
        console.log(numInt) //10

        let numString="11"
        let numInt=Number(numString)
        console.log(numInt) //11

        let numString="12"
        let numInt= +numString
        console.log(numInt) //12

    2. String to float
    - parseFloat()
    - Number()
    - +
        let numString="9.81"
        let numFloat=parseFloat(numString)
        console.log(numFloat) //9.81

        let numString="11.12"
        let numFloat=Number(numString)
        console.log(numInt) //11.12

        let numString="32.23"
        let numInt= +numString
        console.log(numInt) //32.23
    
    3. Float to int
    - parseInt()

        let mathPi=3.14
        let engineerPi=parseInt(mathPi)
        console.log(engineerPi) //3
        





